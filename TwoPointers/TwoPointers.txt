The Two Pointers approach is useful when we are dealing with problems
with sorted arrays (or LinkedLists) and need to find a set of elements 
that fulfill certain constraints.

Example
Given an array of sorted numbers and a target sum, find a pair in the array whose 
sum is equal to the given target. Write a function to return the indices of the two 
numbers (i.e. the pair) such that they add up to the given target.
Solution
1. Given that the input array is sorted, an efficient way would be to start with 
one pointer in the beginning and another pointer at the end.
2.  At every step (ie for each iteration), we will see if the numbers pointed by the 
two pointers add up to the target sum. If they do not, we will do one of two things:
    (i) If the sum of the two numbers pointed by the two pointers is > target 
    sum, this means that we need a pair with a smaller sum. So, to try more pairs, we 
    can decrement the end-pointer.
    (ii) If the sum of the two numbers pointed by the two pointers is < the 
    target sum, this means that we need a pair with a larger sum. So, to try more pairs, 
    we can increment the start-pointer.
The time complexity of the above algorithm will be O(N).
